substitutions:
  name: "gtn-inverter-1"
  device_description: "Monitor and control GTN Inverter via RS485 (Modbus)"
  external_components_source: github://Helge44/esphome-dlms-gtn@main
  tx_pin: GPIO16
  rx_pin: GPIO17

esphome:
  name: ${name}
  friendly_name: gtn-inverter-1
  comment: ${device_description}

esp32:
  board: esp32dev
  framework:
    type: arduino

external_components:
  - source: ${external_components_source}
    refresh: 0s

# Enable logging
logger:
  level: DEBUG
  logs:
    api.service: WARN
    ota: WARN
    sensor: DEBUG
    
# Enable Home Assistant API
api:
  encryption:
    key: "kivr2apIyhILFLJWWlNqDoXVHLnhwqK7eVauFNQobyg="

ota:


wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Esphome-Web-A2D364"
    password: "C3z3DM0bBcbN"

captive_portal:

uart:
  - id: uart_0
    baud_rate: 4800
    tx_pin: ${tx_pin}
    rx_pin: ${rx_pin}

soyosource_modbus:
  - id: modbus0
    uart_id: uart_0
    # name: garageinverter1

soyosource_virtual_meter:
  - id: virtualmeter0
    # Slave address 0x01
    # address: 0x01
    soyosource_modbus_id: modbus0
    # command_throttle: 200ms
    # update_interval: 10s

    # The state of this sensor (instantaneous power in watt) is used as source
    power_id: powermeter0

    # Optional settings
    power_sensor_inactivity_timeout: 20s
    power_demand_calculation: NEGATIVE_MEASUREMENTS_REQUIRED
    min_power_demand: 0
    max_power_demand: 900
    zero_output_on_min_power_demand: true
    # Split/distribute the power demand if you have multiple inverters attached to the same RS485 bus
    power_demand_divider: 1
    # A positive buffer value (10) tries to avoid exporting power to the grid (demand - 10 watts)
    # A negative buffer value (-10) exports power to the grid (demand + 10 watts)
    buffer: 10

    # The update interval is important and defaults to 3 seconds. If the demand is sent too frequently
    # or rarely the interverter stops. TODO: Identify and validate the lower and upper update limit
    update_interval: 5s


number:
  - platform: soyosource_virtual_meter
    soyosource_virtual_meter_id: virtualmeter0
    buffer:
      name: "${name} buffer"
      initial_value: 10
      restore_value: true
    manual_power_demand:
      name: "${name} manual power demand"
      max_value: 900
    max_power_demand:
      name: "${name} max power demand"
      initial_value: 600
      max_value: 900
      restore_value: true
    power_demand_divider:
      name: "${name} power demand divider"
      initial_value: 1
      restore_value: true

sensor:
  - platform: soyosource_virtual_meter
    soyosource_virtual_meter_id: virtualmeter0
    power_demand:
      name: "${name} power demand"

  # import smartmeter reading from homeassistant
  # requires the "api" component see above
  - platform: homeassistant
    id: powermeter0
    name: "${name} smartmeter instantaneous power"
    entity_id: sensor.esphome_smart_meter_meter01_active_power_plus
    filters:
      - throttle_average: 15s

switch:
  - platform: soyosource_virtual_meter
    soyosource_virtual_meter_id: virtualmeter0
    manual_mode:
      name: "${name} manual mode"
      restore_mode: RESTORE_DEFAULT_ON
    emergency_power_off:
      name: "${name} emergency power off"
      restore_mode: RESTORE_DEFAULT_OFF

text_sensor:
  - platform: soyosource_virtual_meter
    soyosource_virtual_meter_id: virtualmeter0
    operation_mode:
      name: "${name} limiter operation mode"
